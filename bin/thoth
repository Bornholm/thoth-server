#!/usr/bin/env node

var program = require('commander');

program
	.version('0.0.0')
	.usage('[options] <command>')
	.option('-c, --config <dir>', 'load config from directory')
	.parse(process.argv)

program.on('--help', function() {
		console.log('  Commands:');
		console.log('');
		console.log('    create-admin	create an admin account with local password')
		console.log('');
});

if(program.config) {
	var path = require('path');
	process.env.NODE_CONFIG_DIR = path.resolve(program.config);
}

/*
 * Commands 
 */

var commands = {};

commands['create-admin'] = function createAdmin() {

	var Hookable = require('../lib/util/hookable');
	var bootstrap = require('../lib/bootstrap');
	var config = require('config');
	var async = require('async');
	var User = require('../lib/models/user');

	var api = new Hookable();

	console.log('Creating new admin account...')
	async.waterfall([
		bootstrap.initApi.bind(null, config, api),
		bootstrap.initLocalAuthStrategy.bind(null, config, api),
		bootstrap.initPlugins.bind(null, config, api),
		bootstrap.initDatabaseConnection.bind(null, config, api),
		bootstrap.initModels.bind(null, config, api),
		bootstrap.initAuthStrategy.bind(null, config, api),
		function askAdminUsername(cb) {
			program.prompt('Username: ', cb.bind(null, null));
		},
		function askAdminPassword(username, cb) {
			program.password('Password: ', '*', cb.bind(null, null, username));
		},
		function askAdminPassword2ndTime(username, password, cb) {
			program.password('Password (just to be sure): ', '*', function(password2) {
				if(password !== password2) return cb(new Error('Passwords mismatch !'));
				cb(null, username, password);
			});
		},
		function confirm(username, password, cb) {
			var msg = 'Will create new admin account ' +
				username + '/' + password.replace(/./g, '*') +
				'. Continue (y/n) ? ';
			program.confirm(msg, function(ok) {
				if(ok) return cb(null, username, password);
				console.log('Aborting...');
				process.exit();
			});
		},
		function createAdminUser(username, password, cb) {
			var user = new User();
			user.auth.local = {
				password: password,
				username: username
			};
			user.addPermission('*', '*');
			user.markModified('auth');
			user.save(cb);
		}
	], function(err) {
		if(err) throw err;
		console.log('Done !');
		process.exit();
	});

};

/*
 * Parse commands
 */

var c = program.args[0];
if(c && commands[c]) {
	commands[c]();
} else program.help();

